const database_key = require("./access.js");
const fs = require('fs');
const { Transform } = require('stream');
const MongoClient = require('mongodb').MongoClient;
const JSONStream = require('jsonstream');

async function storeFilesInDb(filePath) {
  let client;
  try {
    client = await MongoClient.connect(database_key, { useUnifiedTopology: true });

    const db = client.db('data_file');
    let files = [];
    let currentFolder;

    const writeStream = new Transform({
      objectMode: true,
      async transform(file, encoding, callback) {
        if (file.folder === currentFolder) {
          files.push({ fileName: file.fileName });
        } else {
          if (files.length > 0) {
            const collection = db.collection(currentFolder);
            await collection.insertMany(files);
            console.log(`${files.length} files stored! folder:${currentFolder}`);
            console.log(`Total files stored: ${await collection.countDocuments()}`);
            files = [];
          }
          currentFolder = file.folder;
          files.push({ fileName: file.fileName });
        }
        callback();
      },
      async flush(callback) {
        if (files.length === 0) {
          callback();
          return;
        }
        const collection = db.collection(currentFolder);
        await collection.insertMany(files);
        console.log(`Remaining files stored! folder:${currentFolder}`);
        console.log(`Total files stored: ${await collection.countDocuments()}`);
        callback();
      },
    });

    fs.createReadStream(filePath, { encoding: 'utf8' })
      .pipe(JSONStream.parse('*'))
      .pipe(writeStream);

  } catch (error) {
    console.error(error);
  } finally {
    if (client) {
      //await client.close();
    }
  }
}

storeFilesInDb('D:\\output\\results.json');

